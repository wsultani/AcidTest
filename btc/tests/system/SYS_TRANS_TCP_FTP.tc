#!/usr/bin/expect --

proc SYS_TRANS_TCP_FTP {} {
#--------------------------------------------------------------------------------------------#
variable p [namespace tail [lindex [info level 0] 0]]
set ${p}(Name)		$p
set ${p}(type)		{testcase}
set ${p}(Description)	{Run an ftp command on one PC to the other PC.}
set ${p}(Suite)		{system}
set ${p}(Comments)	{}
set ${p}(Author)	{wsultani}
set ${p}(Required)	{dut sw0 pc0 pc1}
set ${p}(Created)	{08-07-25}
set ${p}(EOL)		{}
update_mysql_db ${p}
#--------------------------------------------------------------------------------------------#

    package require config

    set dut_sid $::sid($::dut)
    set pc0_sid $::sid($::pc0)
    set pc1_sid $::sid($::pc1)

    set src_pc(obj) "$::pc0"
    set src_pc(int) "eth1"
    set src_pc(ip) "10.10.1.2"
    set src_pc(sid) "$pc0_sid"
    set src_pc(port) "17"
    set src_pc(bcast) "10.10.1.255"
    set src_pc(mask) "255.255.255.0"

    set dst_pc(obj) "$::pc1"
    set dst_pc(int) "eth1"
    set dst_pc(sid) "$pc1_sid"
    set dst_pc(port) "18"
    set dst_pc(bcast) "10.10.1.255"
    set dst_pc(mask) "255.255.255.0"

    set connect_mode ftp
    set reg_pkt_count 70
    set slot 0

    set ret [$::dut bivio_io_ports $slot]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    foreach line [split [string trim [data_from $ret]] "\n"] {
        if { ![regexp {Port\s+(\d+),} $line match max_port] } {
            write_error [data_from $ret]
            return [list false [data_from $ret]]
        }
    }

    # for each port pair
    for {set port 0} {$port <= $max_port} {incr port 2} {

        # start a subtest
        start_subtest "PORTPAIR-$port-[expr $port + 1]" 

        set bv_in $port 
        set bv_out [expr $port + 1] 

        set sw_in [expr $bv_in + 1]
        set sw_out [expr $bv_out + 1]

        # delete any existing vlans.
        set ret [$::sw sw_config {vlan database} "no vlan 100-101"]
        if { [problem_with $ret data] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        # configure vlans on switch, configure pc1(g17) on port 1
        set ret [$::sw sw_config_vlan 100 "$sw_in $src_pc(port)"]
        if { [problem_with $ret data] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        # configure vlans on switch, configure pc2(g18) on port 2
        set ret [$::sw sw_config_vlan 101 "$sw_out $dst_pc(port)"]
        if { [problem_with $ret data] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        # turn off all ports on the default vlan
        set ret [$::sw sw_toggle_interface vlan 1 off]
        if { [problem_with $ret data] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        set ret [$::dut bivio_nrsp_reset default all]
        if { [problem_with $ret data] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        write_step "Loading default config"
        set ret [default_config]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        write_step "Loading zbridgeapp config"
        set ret [zbridgeapp_config]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        write_step "Configuring $src_pc(obj) interface $src_pc(int) to $src_pc(ip)"
        set ret [$src_pc(obj) pc_config_int $src_pc(int) $src_pc(ip) $src_pc(mask) $src_pc(bcast)]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        write_step "Performing show stats on dut"
        set cmd "show_stats -c"
        set exp "$::prompt($::dut)"

        set ret [send_expect_pair $dut_sid $cmd $exp "$::prompt($::dut)" 2 5]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
        }

        set gone_bad 0

        for {set x 26} {$x <= 37} {incr x} {

            set dst_pc(ip) "10.10.1.$x"

            write_step "Configuring $dst_pc(obj) interface $dst_pc(int) to $dst_pc(ip)"
            set ret [$dst_pc(obj) pc_config_int $dst_pc(int) $dst_pc(ip) $dst_pc(mask) $dst_pc(bcast)]
            if { [problem_with $ret] } {
                write_error [data_from $ret]
                end_subtest [list false [data_from $ret]]
                incr gone_bad
                break
            }

            write_step "Performing $connect_mode from $src_pc(obj)\($src_pc(ip)\) to $dst_pc(obj)\($dst_pc(ip)\)"
            set ret [$src_pc(obj) pc_connect_to $connect_mode $dst_pc(ip) btc_user btc_user]
            if { [problem_with $ret] } {
                write_error [data_from $ret]
                end_subtest [list false [data_from $ret]]
                incr gone_bad
                break
            }

            write_step "Performing $connect_mode from $dst_pc(obj)\($dst_pc(ip)\) to $src_pc(obj)\($src_pc(ip)\)"
            set ret [$dst_pc(obj) pc_connect_to $connect_mode $src_pc(ip) btc_user btc_user]
            if { [problem_with $ret] } {
                write_error [data_from $ret]
                end_subtest [list false [data_from $ret]]
                incr gone_bad
                break
            }
        }

        if { $gone_bad > 0 } {
            continue
        }

        write_step "Performing show stats on dut"
        set cmd "show_stats -c"
        set exp "$::prompt($::dut)"

        set ret [send_expect_pair $dut_sid $cmd $exp "$::prompt($::dut)" 2 5]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            end_subtest [list false [data_from $ret]]
            continue
        }

        # get the total number of packets recieved
        if { ![regexp {Total:\s+(\d+)} [data_from $ret] match total] } {
            write_error "Could not get total packet count - [data_from $ret]"
            end_subtest [list false [data_from $ret]]
            continue
        }

        # As per comments from the developer (ronak) The packet count through the system is irrelavent
        # and unpredictable. Thus we cannot predict and expect a specific count.
        # the counter on show stats for 10 pings should be greater the $reg_pkt_count.
        if { $total < $reg_pkt_count } {
            write_warning "RX Packet count on $::dut is $total, expected $reg_pkt_count or greater"
            end_subtest [list true [data_from $ret]]
            continue
        }

        write_step "RX Packet count on $::dut is $total, expected $reg_pkt_count or greater"
        end_subtest [list true [data_from $ret]]
    }

    return [analyze_subtest]
}
# this is required for auto loading
package provide SYS_TRANS_TCP_FTP 1.0
