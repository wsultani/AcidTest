proc parse_sai_results { saifile flowtest {outputfilename ""} {format manufacturing} } {

    upvar pinfo info
    upvar #1 build bld

    # add the testbed to the info array
    set info(Testbed) "$bld(Testbed)"

    # add the FPGA to the info array
    set info(FPGA) "$bld(FPGA)"

    # add the ROM to the info array
    set info(ROM) "$bld(ROM)"

    set filename [getFlowInfo $saifile $flowtest reportfilename]
    if { ![file exists $filename] || $filename == "" } {
        puts "Can't determine the reportfile for flowtest $flowtest in $saifile"
        exit
    }

    switch $format {

        performance {
            set displaycondition {$result($framesize.Throughput) >= $report($framesize.Throughput) && $result($framesize.LostFrames) == "0"} 
            set fetchlist {Throughput RxL2Mbps Rxfps DupFrames LostFrames}
            set showlist [linsert $fetchlist 0 PktSize]
            set width 17
            set passcondition {0}
            set iterationid {SmartFlow Throughput Results.*?(?=SmartFlow Throughput Results)}
            set atext "============= SmartFlow Throughput Results"
        }

        latency {
            set displaycondition {$result($framesize.Load) >= $report($framesize.Load)}
            set fetchlist {Load MinLat AvgLat MaxLat}
            set showlist [linsert $fetchlist 0 PktSize]
            set width 17
            set passcondition {0}
            set iterationid {SmartFlow Latency Results.*?(?=SmartFlow Latency Results)}
            set atext "============= SmartFlow Latency Results"
        }

        manufacturing -

        default {
            set displaycondition {$result($framesize.Throughput) >= $report($framesize.Throughput)} 
            set fetchlist {CurrentLoad Throughput LostFrames}
            set showlist [linsert [linsert $fetchlist 0 PktSize] end Results]
            set width 20
            set passcondition {$report($framesize.LostFrames) > 0}
            set iterationid {SmartFlow Throughput Results.*?(?=SmartFlow Throughput Results)}
            set atext "============= SmartFlow Throughput Results"
        }
    }

    set fh [open $filename r]
    set filetext [read $fh]
    close $fh

    set rawresultstext $filetext

    # In order for the following regular expression to work, we need to add some extra text
    # to the end of the text so that the last iteration can be matched.
    append filetext "$atext"

    # The next line breaks the entire result file into a list of iterations.
    set iterationtextlist [regexp -nocase -inline -all $iterationid $filetext]

    set framesizelist ""

    foreach text $iterationtextlist {
        # Determine which iteration this is. eg: (Iteration = 5)
        set iteration [lindex [lindex [regexp -nocase -inline {iteration = [0-9]+} $text] 0] 2]

        # Find the column header row. This row always starts with "Name".
        set headerline [lindex [regexp -nocase -inline -line {^name.*} $text] 0]
        set headerline [regsub -all {\(Âµsec\)} $headerline ""]

        # Construct a list of column headers.
        set headerlist ""
        foreach element [split $headerline ,] {
            # clean up the header elements
            set element [string trim $element]
            if { $element != "" } {
                lappend headerlist [regsub -all {[%" "]} $element ""]
            }
        }

        # Find the totals row. This row always starts with "totals".
        set totalline [lindex [regexp -nocase -inline -line {^totals.*} $text] 0]

        # Construct a list of total values.
        set totallist ""
        foreach val [split $totalline ,] {
            set val [string trim $val]
            if { $val != "" } {
                lappend totallist $val
            }
        }

        # Determine the framesize for this testrun.
        # First, determine which column contains the framesize.
        set index [lsearch $headerlist "PacketLength"]
        set framesize [lindex $totallist $index]

	# get the number of actual ports configured in the sai file.
        set spcount [getDefaultInfo $saifile ports]
        if { $spcount == "" || $spcount == 0 } {
            write_error "cannot get the total number of Smartbit ports"
            exit
        }

        # for latency, each iteration is a load data, so we need to analyze each
        # line in the iteration and determine the load and append to the total list.
        if { $format == "latency" } {
            set loadsum 0
            set index [lsearch $headerlist "Load"]
            foreach line [split $text \n] {
                set rowlist ""
                foreach val [split $line ,] {
                    set val [string trim $val]
                    if { $val != "" } {
                        lappend rowlist $val
                    }
                }

                set load [lindex $rowlist $index]
                if { [string is digit -strict $load] || [string is double -strict $load] } {
                    set loadsum [expr $loadsum + $load]
                }
            }

            set totallist [lreplace $totallist $index $index [expr round($loadsum)/$spcount]]

            # for latency we will have multiple data for the same framesize
            # so change the framesize identifier to be unique for each iteration. 
            set framesize "$iteration.$framesize"
        }

        array set result ""
        if { [string is double -strict $framesize] } {

            # Add this row to the results array.
            for { set i 1 } { $i < [llength $totallist] } { incr i } {
                set label [lindex $headerlist $i]
                set data  [lindex $totallist $i]
                set result($framesize.$label) $data
            }

            if { ![info exists report($framesize.Throughput)] } {
                array set report [array get result]
            }

            if { [expr $displaycondition] } {
                array set report [array get result]
            }

            set framesizelist [luniqueappend $framesizelist $framesize]
            array unset result
        
        } else {
            write_warning "WARNING: Unable to add the results for iteration $iteration.\
						Unable to determine the PacketLength."
        }
    }

    set temp_keys ""
    set temp_vals ""

    foreach aname [array names info] {
        lappend temp_keys "\`$aname\`"
        lappend temp_vals "\'$info($aname)\'"
        append temp_sql_cmd "\`$aname\` varchar \(45\) NOT NULL, "
        append scmd "AND $aname = \"$info($aname)\" "
    }

    # Add the actual port numbers that have traffic trought them.
    lappend temp_keys "\`Traffic\`"
    lappend temp_vals "\'$spcount\'"
    append temp_sql_cmd "\`Traffic\` varchar \(45\) NOT NULL, "
    append scmd "AND Traffic = \"$spcount\" "

    # Generate the report.

    foreach s $showlist {
        lappend fmt "%-${width}s"
    }

    set tfmt {%-20s %-20s}

    foreach ik [array names info] {
        append reporttext "[format $tfmt $ik $info($ik)]\n"
    }

    append reporttext "[format $tfmt Test [file rootname [file tail $filename]]]\n"
    append reporttext "[string repeat "-" [expr ($width + 1) * [llength $fmt]]]\n"
    append reporttext "[eval format {$fmt} $showlist]\n"
    append reporttext "[string repeat "-" [expr ($width + 1) * [llength $fmt]]]\n"

    foreach framesize $framesizelist {
        set res ""
        lappend res "[expr $report($framesize.PacketLength) + $report($framesize.CRCSize)]"

        lappend temp_keys "\`$res\`"
        append temp_sql_cmd "\`$res\` Float NULL, "

        foreach f $fetchlist {
            set val "$report($framesize.$f)"
            set nft {%s}
            if { [regexp {\d+\.\d+} $val match] } {
                 set nft {%.2f}
            }
            lappend res [format $nft $val]

            if { $f == "Throughput" } {
                lappend temp_vals [format $nft $val]
            } 
        }

        if { [expr $passcondition] } {
            lappend res Fail
        } else {
            lappend res Pass
        }

        append reporttext "[eval format {$fmt} $res]\n" 

        if { $format == "latency" && $report($framesize.Load) >= 100 } {
            append reporttext "[string repeat "-" [expr ($width + 1) * [llength $fmt]]]\n"
        }
    }

    # if posting is not disabled
    if { $::post != 0 && $format != "latency"} {

        # Get the perf testcase name
        set tcname "[namespace tail [lindex [info level -2] 0]]"

        # set the db table name to the the testcase name
        set table "\`btc_db\`.\`btc_perf\`"

        # fetch the build info from main script.
        upvar #1 build b

        # set the local mysql handle to the global handle
        set mysql $::mysql

        # update the performance database with the results. Create the db table if it doesnot exist.
        set sql_cmd "CREATE TABLE IF NOT EXISTS $table \(\`id\` MEDIUMINT NOT NULL AUTO_INCREMENT, \`Name\` varchar\(45\) NOT NULL, \`Build\` varchar\(45\) NOT NULL, "

        append sql_cmd $temp_sql_cmd

        append sql_cmd {PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=latin1;}

        write_info "\nCreating database table - $sql_cmd\n"

        if { [catch {::mysql::exec $mysql $sql_cmd} ret] } {
            write_warning "error while $sql_cmd - $ret"
        }

        set sql_cmd "SELECT \* FROM $table WHERE Name = \"$tcname\" ${scmd}AND Build = \"$b(Version)\""
        if { [catch {::mysql::sel $mysql $sql_cmd -flatlist} ret] } {
            write_info "error while $sql_cmd - $ret"
        }

        set keys "id Name Build $temp_keys"
        set vals "\'\' \{\'$tcname\'\} \{\'$b(Version)\'\} $temp_vals"

        if { [llength $ret] > 0 } {
            set sl ""
            foreach k $keys v $vals {
                if { $k == "id" } {
                    continue
                }
                lappend sl "$k = $v"
            }
            set sl [join $sl ", "]
            set sql_cmd "UPDATE $table SET $sl WHERE Name = \"$tcname\" ${scmd}AND Build = \"$b(Version)\""
        } else {

            foreach nk $temp_keys {
                set scmd "SELECT $nk FROM $table"
                if { [catch {::mysql::sel $mysql $scmd} ret] } {
                    set qcmd "ALTER TABLE $table ADD $nk FLOAT NULL"
                    if { [catch {::mysql::exec $mysql $qcmd} ret] } {
                        write_warning "error while $qcmd - $ret"
                    }
                }
            }

            set keys [join $keys ", "]
            set vals [join $vals ", "]
            set sql_cmd "INSERT INTO $table \($keys\) VALUES \($vals\)"
        }

        write_info "\nUpdating Perf DB with test info - $sql_cmd\n"

        if { [catch {::mysql::exec $mysql $sql_cmd} ret] } {
            write_warning "error while $sql_cmd - $ret"
        }
    }

    append reporttext "[string repeat "-" [expr ($width + 1) * [llength $fmt]]]\n"

    if { $outputfilename != "" } {    
        set fh [open [file join temp $outputfilename.txt] w+]
        puts $fh $reporttext
        close $fh
    }
    return $reporttext
}

proc getFlowInfo { saifile flownum info } {

    set fh [open $saifile r]
    set filetext [read $fh]
    append filetext "flowtest"
    close $fh

    set flowlst [regexp -nocase -inline -all "flowtest.*?(?=flowtest)" $filetext]
    if { [llength $flowlst] <=0 } {
        return ""
    }

    set index [lsearch -regexp $flowlst "flowtest $flownum"]

    set ret [regexp -inline -nocase -line "${info}(.*)" [lindex $flowlst $index]]
    set ret [string trim [lindex $ret 1]]
    return $ret
}

proc getDefaultInfo { saifile info } {

    set fh [open $saifile r]
    set filetext [read $fh]
    append filetext "flowtest"
    close $fh

    if {$info == "ports"} {
        set port 0
        set flowlst [regexp -nocase -inline -all "ports.*?(?=resolve_endpoints)" $filetext]
        if { [llength $flowlst] <=0 } {
            return ""
        }

        foreach line [split $flowlst "\n"] {
            if [regexp -nocase {eth\s+\d+:\d+:\d+} $line match] {
                incr port
            }
        }
        return $port
    }

    set flowlst [regexp -nocase -inline -all "testdefaults.*?(?=ports)" $filetext]
    if { [llength $flowlst] <=0 } {
        return ""
    }

    set ret [regexp -inline -nocase -line "${info}\\s+(\\S+)" $flowlst]
    set ret [string trim [lindex $ret 1]]
    return $ret
}

proc fill_ip { ip mask } {

    if { [llength $ip] != [llength $mask] } {
        puts "$ip and $mask need to be same length"
        return [list false ""]
    }

    if { ![regexp {(.*)[xX](.*)} $mask match pre post] } {
        puts "can't find target value to fill in $mask"
        return [list false ""]
    }

    if { ![regexp "${pre}(.*)$post" $ip match target] } {
        puts "can't find target value to fill in $ip"
        return [list false ""]
    }

    set out [incr target]
    return [list "true" "$pre$out$post"]
}

proc generate_sai { {flows ""} {framesize ""} {testtime 60} {output ""} } {

    set build "5.0.6.1"
    #set factor 20
    set xlrstreams 32

    # smb system details
    foreach key [array names ::smb] {
        if { $key == "IP" || $key == "dir"} {
            continue
        }

        # smb to bivio slot mapping.
        set smb_to_bv($key) [lindex $::smb($key) 0]
    }

    if { ![info exists framesize] || $framesize == "" } {
        set framesize {64 128 200 256 350 384 440 448 500 512 1024 1280 1500 1518}
    }

    if { ![info exists flows] || $flows == "" } {
        set flows $::sys_info(CPUNet)
    }

    set cbuild [data_from [$::dut bivio_show_version]]
    set ret [compare_builds "$cbuild" gt "$build"]
    if { [problem_with $ret] } {
        # pre build
        write_step "Pre $build - no pkt reorder computation nesseccary"
    } else {
        # post build
        #write_step "Post $build - multiplying flows\($flows\) by factor\($factor\) for pkt reorder"
        #set flows [expr $flows * $factor]

        write_step "Post $build - calculating number of flows for optimum pkt reorder"
        for {set x 1} {$x < 20} {incr x} {
            if { [expr ($xlrstreams * $x) % $flows] == 0 } {
                set flows [expr $xlrstreams * $x]
                write_step "Calculated $flows flows for optimum pkt reorder"
                break
            }
        }
    }

    set ip 10.1.0.1
    set ip_fill_mask 10.X.0.1

    set gw 10.1.0.2
    set gw_fill_mask 10.X.0.2

    set total_flow $flows
    set endpoint_prefix 1

    set testname "PERF_GROUP"
    set groupname "PERF_GROUP"

    array set defaults_arr ""
    set defaults_arr(erroraction) IGNORE
    set defaults_arr(testinteractive) no
    set defaults_arr(showloading) no
    set defaults_arr(sizewcrc) yes
    set defaults_arr(readbackdelay) 2
    set defaults_arr(socketlinkport) 16385
    set defaults_arr(learningcount) 1
    set defaults_arr(statusmessagefilter) normal
    set defaults_arr(RatePerFlowUnit) percentage
    set defaults_arr(ResultDataSpeedUnit) Mbps
    set defaults_arr(ResultL2Adjustment) 38
    set defaults_arr(thruputSMMR) 100.000:1.000:100.000:1.0
    set defaults_arr(definethruput) 0
    set defaults_arr(thruputRSB) 0:0:1
    set defaults_arr(thruputscale) 0.500
    set defaults_arr(thruputgranularity) group

    set defaults_fmt "  %-25s %-s\n"
    foreach name [array names defaults_arr] {
        append defaults_data "[format $defaults_fmt $name $defaults_arr($name)]"
    }

    set flowtest_arr(testname) "$testname"
    set flowtest_arr(connect) $::smb(IP)
    set flowtest_arr(testtype) "THRUPUT"
    set flowtest_arr(testtime) $testtime
    set flowtest_arr(ReportAFGRTS) "1:1:1:0:0:0"
    set flowtest_arr(training) NO
    set flowtest_arr(includegroups) "$groupname"
    set flowtest_arr(reportfilename) "temp/${testname}.csv"
    set flowtest_arr(statusmessagefilename) "temp/${testname}.log"
    set flowtest_arr(framesizes) $framesize
    set flowtest_arr(DIEnabled) no
    set flowtest_arr(AllowJumboFrame) yes

    append flowtest_data "flowtest 1\n"
    foreach name [lsort [array names flowtest_arr]] {
        if { $name == "connect" } {
            foreach sysip $flowtest_arr($name) {
                append flowtest_data "  $name $sysip\n"
            }
            continue
        }
        append flowtest_data "  $name $flowtest_arr($name)\n"
    }

    set dir fwd

    append group_data "group $groupname\t"

    set port_fmt "  %-5s %-7s %-7s %-7s %-7s %-2s %-2s %-2s %-7s %-4s %-10s %-10s %-10s %-5s %-6s\n"
    set endpoint_fmt "  %-5s %-7s %-7s %-17s %-12s %-12s %-5s\n"
    set flow_data_fmt "  %-4s %-4s->%-9s %-15s %-6s %-4s %-4s %-7s %-4s %-1s\n"

    # previous slot
    set pslot ""

    # foreach slot
    foreach slot [lsort [array names smb_to_bv]] {

        set ret [get_slot_info Slot$smb_to_bv($slot)]
        if { [problem_with $ret] } {
            write_error "Unable to get bivio Slot$smb_to_bv($slot) info - [data_from $ret]"
            return $ret
        }

        set smbport [lindex $::smb($slot) 1]
        set bvpcount [lindex [data_from $ret] 0]
        set speed [lindex [data_from $ret] 1]

        if { [regexp {(^\d)G} $speed match nspeed] } {
            set speed [expr $nspeed * 1000]
        }

        set ret [get_slot_info Slot$smb_to_bv($slot) "Link Type"]
        if { [problem_with $ret] } {
            write_error "Unable to get the Link Type for Slot$smb_to_bv($slot) - [data_from $ret]"
            return $ret
        }
        set mode [string tolower [data_from $ret]]

        # if new slot then reset port count.
        if { $pslot != $smb_to_bv($slot)} {
            append port_data "# SMB Slot$slot --> BV Slot$smb_to_bv($slot):\n"
            set pcount 0
        }
        set pslot $smb_to_bv($slot)

        # foreach port
        for {set port 0} {$port < $smbport} {incr port} {
            # set the bivio port naming i.e. s0.e1
            set bv_port_name "s$smb_to_bv($slot)e$pcount"
            incr pcount

            # if the smb ports are greater then the bivio ports then do not include 
            # the additional ports in sai.
            if { $pcount > $bvpcount } {
                continue
            }

            # Add port data
            append port_data [format $port_fmt "eth" "$slot:$port" "10.00" "10.00" $speed F A 1 random L2S "$ip" "$gw" "255.0.0.0" "$mode" "$bv_port_name"]
            set ip [lindex [fill_ip $ip $ip_fill_mask] 1]
            set gw [lindex [fill_ip $gw $gw_fill_mask] 1]

            # Add resolve_endpoints data
            append epoint_data "# $bv_port_name Flows Start\n"
            set epoint_ip "10.$endpoint_prefix.1.0"
            set epoint_ip_mask "10.$endpoint_prefix.1.X"
            set epoint_mac "0.$smb_to_bv($slot).19.0.$port.00"
            set epoint_gw "10.$endpoint_prefix.0.2/8"

            set endpoint "${endpoint_prefix}000"

            switch $dir {
                fwd {
                    set dst [expr $endpoint + 1001]
                    set dir rev
                }

                rev {
                    set dst [expr ($endpoint - 1000) + 1]
                    set dir fwd
                }
            }

            append flow_data "# $bv_port_name\n"

            # foreach flow.
            for {set flow 0} {$flow < $total_flow} {incr flow} {

                set epoint_mac "0.$smb_to_bv($slot).19.0.$port.[format %02X $flow]"

                append epoint_data [format $endpoint_fmt "node" "$endpoint" "$bv_port_name" "$epoint_mac" "$epoint_ip" "$epoint_gw" "1024+"]
                set epoint_ip [lindex [fill_ip $epoint_ip $epoint_ip_mask] 1]

                # Add defineflows data
                append flow_data [format $flow_data_fmt UDP $endpoint $dst "${bv_port_name}_[format %03s $flow]" 64 00 64 none 0 0]

                incr endpoint
            }

            append group_data "${bv_port_name}_000:${bv_port_name}_[format %03s [expr $flow - 1]]\\\n\t\t\t "

            incr endpoint_prefix
        }
    }

    # write out the sai file.

    if { $output != "" } {
        set out [open $output w]

        puts $out "sai smartflow"
        puts $out "[string repeat # 100]\ntestdefaults\n[string repeat # 100]"
        puts $out $defaults_data

        puts $out "[string repeat # 100]\nports\n[string repeat # 100]"
        puts $out $port_data

        puts $out "[string repeat # 100]\nresolve_endpoints\n[string repeat # 100]"
        puts $out $epoint_data

        puts $out "[string repeat # 100]\ndefineflows\n[string repeat # 100]"
        puts $out $flow_data

        puts $out "[string repeat # 100]\ndefinegroups\n[string repeat # 100]"
        puts $out $group_data

        puts $out $flowtest_data

        close $out
    }

    return [list true ""]
}

package provide sai_report 1.0
