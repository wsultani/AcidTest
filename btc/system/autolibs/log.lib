#!/usr/bin/expect --

proc mk_dir { dirlst } {
    set rdir ""
    foreach dir $dirlst {
        set rdir [file join $rdir $dir]
        if { [catch {file mkdir $rdir} err] } {
            return [list false "$err"]
        }
        if { [catch {file attributes $rdir -permissions 0777} err] } {
            continue
        }
    }
    return [list true $rdir]
}

proc open_file { logfile {dir "" } } {

    if { $dir != "" } {
        set logfile [file join $dir $logfile]
    }

    if { [catch {open "$logfile" w+} ret] } {
        return [list false "$ret"]
    }

    return [list true "$ret"]
}

proc close_file { fd } {
    close $fd
}

proc write_html { fd data {tag "row"} } {

    set fmt "<tr>"
    foreach val $data {
        append fmt {<td>%s</td>}
    }
    append fmt "</tr>"

    if { $tag == "table" } {
        set fmt "<table border=0 cellpadding=5>$fmt</table>"
    }
    set out "[eval format $fmt $data]\n"
   
    puts $fd "$out"
}

proc custom_write_html { fd data {tag "row"} } {

    upvar $data info

    if { $info(type) == "RESULT" } {
        set fmt "<tr id=\"[string tolower $info(msg)]\"><td><a name=$info(msg)>%s</a></td><td>%s</td>\
						<td>%s</td><td><pre>%s</pre></td></tr>"
    } else {
        set fmt "<tr id=\"[string tolower $info(type)]\"><td>%s</td><td>%s</td>\
						<td>%s</td><td><pre>%s</pre></td></tr>"
    }

    if { $tag == "table" } {
        set fmt "<table border=0 cellpadding=5>$fmt</table>"
    }
    set out "[format $fmt $info(type) $info(timestamp) $info(proc) $info(msg)]\n"

    puts $fd "$out"
}

proc html_header { fd {title ""} } {
    set out "
<html>
  <head>
    <title>$title</title>
    "
    append out "
    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://<\? echo \$_SERVER\[\"SERVER_ADDR\"\]; \?>/AcidTest/web/web2.0/BTC.css\"></link>
  </head>
  <body>
    "
    puts $fd "$out"
}

proc html_close { fd {tag ""} } {
    set out {
</body>
</html>
    }
    if { $tag != "" } {
        set out [regsub "^" $out "</$tag>"]
    }
    puts $fd "$out"
}

proc custom_html_header { fd {title ""} } {

    set out {
<!--
#################################################################################
#										#
# This page is automatically generated by the bivio test center (BTC).		#
#										#
#################################################################################
-->
<html>
  <head>
    }

    append out "<title>$title</title>"

    append out "
    <link rel=\"stylesheet\" type=\"text/css\" href=\"http://<\? echo \$_SERVER\[\"SERVER_ADDR\"\]; \?>/automation/web/web2.0/BTC.css\"></link>
    "

    append out {
    <script type="text/javascript">

      function checkboxfilter (_id){
        var checked = new Array();
        var elements = document.getElementsByTagName('input');
        for(var i = 0; i < elements.length; i++){
          if(elements[i].type == 'checkbox'){
            if(elements[i].checked){
              checked.push(elements[i].value);
            }
          }
        }

        var table = document.getElementById(_id);
        var ele;
        for (var r = 1; r < table.rows.length; r++){
          ele = table.rows[r].innerHTML.replace(/<[^>]+>/g,"");
          var displayStyle = '';
            for (var i = 0; i < checked.length; i++) {
              if (ele.indexOf(checked[i])>=0)
                displayStyle = 'none';
              else {
                continue;
              }
            }
            table.rows[r].style.display = displayStyle;
          }
        }
       

        <!-- run the init function when the page completes loading -->
        window.onload = init;

        function init() {
          <!-- on page load hide the debug info -->
          var elements = document.getElementsByTagName('input');
          for(var i = 0; i < elements.length; i++){
            if(elements[i].type == 'checkbox'){
              if(elements[i].value == 'DEBUG'){
                elements[i].checked = true ;
              }
            }
          }
          checkboxfilter('border');
        }

      </script>
    </head>
    <body>
      <table border=0 cellpadding=5 valign=top>
    }

    append out "
        <tr><td colspan=20><h2>$title Log</h2></td></tr>
    "
    append out {
        <tr>
        <td><input type=checkbox value=DEBUG>DEBUG</input></td>
        <td><input type=checkbox value=OUTPUT>OUTPUT</input></td>
        <td><input type=checkbox value=INFO>INFO</input></td>
        <td><input type=checkbox value=STEP>STEP</input></td>
        <td><input type=checkbox value=SENT>SENT</input></td>
        <td><input type=checkbox value=RECEIVED>RECEIVED</input></td>
        <td><button onclick="checkboxfilter('border')" value=Filter>Hide</button></td>
        </tr>
        <tr><td><br></td>
        </tr>
      </table>

      <table id="border" cellpadding=5 border=1 frame=none rules=all width=100%>
        <tr id=header><th>Tag</th><th>Timestamp</th><th>Procedure</th><th>Message</th></tr>
    }
    puts $fd "$out"
}

proc custom_open_file { fname title {noclose ""} } {

    if { $::logging != 1 } {
        return
    }

    if { $noclose == "" } {
        # close any existing log file.
        if { [info exists ::log] } {
            custom_close_file
        }
    }

    set ret [open_file $fname $::logdir]
    if { [problem_with $ret] } {
        return $ret
    }
    set ::log [data_from $ret]
    custom_html_header $::log $title
    #log_file -a -leaveopen $::log
}

proc custom_close_file {} {

    if { $::logging != 1 } {
        return
    }

    html_close $::log table
    close_file $::log
    #log_file
    unset ::log
}

proc custom_summary { build_info } {

    if { $::logging != 1 } {
        return
    }

    upvar $build_info binfo

    set ret [open_file index.html $::logdir]
    set fd [data_from $ret]

    #set passrate [expr round(($binfo(passcount).0/$binfo(totalcount).0) * 100)]

    html_header $fd "Summary Report - Pass Rate: $binfo(PassRate)%"

    set out "
        <table id=border cellpadding=5 border=1 width=40% frame=none rules=all>
          <tr><td colspan=2 align=center><h2>Summary Report</h2></td></tr>
          <tr><td>Build</td><td align=center>$binfo(Version)</td></tr>
          <tr><td>Device Under Test</td><td align=center>$binfo(Platform)</td></tr>
          <tr><td>Testbed</td><td align=center>$binfo(Testbed)</td></tr>
          <tr><td>FPGA</td><td align=center>$binfo(FPGA)</td></tr>
          <tr><td>ROM</td><td align=center>$binfo(ROM)</td></tr>
    "

    if { [info exists binfo(Comments)] } {
        append out "
          <tr><td valign=top>Comments</h4></td><td align=left>$binfo(Comments)</h4></td></tr>
        "
    }

    append out "
          <tr><td>Total Testcases</td><td align=center>$binfo(TotalReq)</td></tr>
          <tr><td>Total Testcases Ran</td><td align=center>$binfo(Total)</td></tr>
          <tr><td>Total Testcases Warnings</td><td align=center>$::warnings(Total)</td></tr>
          <tr><td>Total Testcases Passd</td><td align=center>$binfo(PassCount)</td></tr>
          <tr><td>Total Testcases Failed</td><td align=center>$binfo(FailCount)</td></tr>
          <tr><td><h4>Pass Rate</h4></td><td align=center><h4>$binfo(PassRate)%</h4></td></tr>
        </table><br>
        <table id=border cellpadding=5 border=1 frame=box rules=all width=100%>
          <tr><td colspan=10><a href=setup.log>BTC Setup</a></td></tr>
    "
    puts $fd $out
    update_custom_summary "" $fd
}

proc update_custom_summary { {tc_info ""} {fd ""} } {

    if { $::logging != 1 } {
        return
    }

    if { $tc_info != "" } {
        upvar $tc_info tinfo

        if { [info exists tinfo(Failure)] } {
            set freason $tinfo(Failure)
	    set mrow "<td><a href=\"$tinfo(log)#$tinfo(Result)\"><pre>$freason</pre></a></td>"
        } else {
            set freason ""
            if { [info exists tinfo(Title)] } {
                set freason "$tinfo(Title)"
            }
	    set mrow "<td><pre>$freason</pre></td>"
        }

        append ::out "
            <tr><td><a href=\"$tinfo(log)\">$tinfo(Name)</a></td>$mrow\
            <td id=$tinfo(Result) align=center><a href=\"$tinfo(log)#$tinfo(Result)\">\
		$tinfo(Result)</a><a href=\"$tinfo(log)\">
                \([llength $::warnings($tinfo(Name))]\)</a></td></tr>\n
        "
    }

    if { $fd != "" } {
        puts $fd $::out
        puts $fd "<tr><td colspan=10><a href=taredown.log>BTC Tare Down</a></td></tr>"
        unset ::out
        html_close $fd
        close_file $fd
    }
}

proc write_raw_txt { fd data } {

    upvar $data info
    set fmt {%-20s%-20s%-40s%s}
    puts $fd "<pre>[format $fmt $info(type) $info(timestamp) $info(proc) $info(msg)]</pre>"
}

package provide btc_log 1.0
