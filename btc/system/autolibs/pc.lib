#!/usr/bin/expect --

package require Itcl

itcl::class pc {

    # set the global retry for this class
    public variable gretry 3
    array set ::sid ""
    array set ::prompt ""
    public variable root_prompt {\]\#}
    public variable admin_prompt {\[admin:\]>}
    public variable rom_prompt {Command>}
    public variable send_human {.1 .3 1 .05 2}

    method pc_connect { method pc_ip user passwrd }
    method pc_general_expect { user passwrd }
    method pc_config_int { int ip mask bcast }
    method pc_add_ip_alias { int ip_range mask bcast }
    method pc_ping { dst count }
    method pc_traceroute { dst hops }
    method pc_connect_to { method dst user passwrd }
    method pc_tcpreplay_play { int mbps pcap }
    method pc_scp_file { src dst passwrd }
    method pc_curl_fetch_header { int url }
    method pc_curl_parse_header { data testarr cfield cvalue }

    public variable ip_add ""
    public variable user "root"
    public variable passwrd "root"
    public variable ctype "ssh"

    constructor {ip_add user password ctype} {

        # store the constructor args
        eval configure -ip_add $ip_add -user $user -passwrd $passwrd \
                       -ctype $ctype

        # open connection to pc object
        set ret [pc_connect $ctype $ip_add $user $password]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            exit
        }
        return [list true $this]
    }

    destructor {
	if [info exist ::sid($this)] {
	    close $::sid($this)
	    write_info "$::sid($this) is closed"
	}
    }
}

itcl::body pc::pc_connect { method pc_ip user passwrd} {

    # set the local retry for this method
    set lretry $gretry

    switch $method {
	"ssh" {
	    set cmd "$user@$pc_ip"
	}
	"telnet" {
	    set cmd "$pc_ip"
	}
	"console" {
	    set method "telnet"
	    set cmd "$console $port"
	}
	default {
	    set method "telnet"
	    set cmd "$pc_ip"
	}
    }

    switch $user {
        root {
	    set ::prompt($this) $root_prompt
        }
        admin {
	    set ::prompt($this) $admin_prompt
        }
	default {
	    set ::prompt($this) $root_prompt
        }
    }
       
    write_step "Connecting to $this \($method $cmd\)"
    if { [catch "spawn $method $cmd" reason] } {
	write_error "Failed to spawn $method $cmd : $reason"
	exit
    }

    set ::sid($this) $spawn_id


    # This is needed if mode is ssh and you are asked if you
    # would like to set up the key and continue.
    if { $method == "ssh" } {
        sleep 2
        exp_send -h "yes\r"
    }

    set ret [pc_general_expect $user $passwrd]
    if { [problem_with $ret] } {
	return [list false [data_from $ret]]
    }
    return [list true $spawn_id]
}

itcl::body pc::pc_general_expect { user passwrd } {
    # set the local retry for this method
    set lretry $gretry
    set attempt 1

    set spawn_id $::sid($this)
    while {$lretry > 0} {
        expect {
            -re "(.*)Escape character is(.*)" {
		set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                exp_send -h "\r"
                exp_send -h "\r"
	        exp_continue
            }

            -nocase "(.*)connection refused(.*)" {
		set msg $expect_out(buffer)
                write_received "$msg"
                write_error "Connection refused"
                flush_exp_buffer $spawn_id
                return [list "false" "$msg"]
            }

            -re "(.*)Host key verification failed(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                set user [exec whoami]
                write_sent "rm -f /$user/.ssh/known_hosts"
                exp_send -h "rm -f /$user/.ssh/known_hosts\r"
                exp_continue
            }

            -re "(.*)you want to continue connecting(.*)" {
		set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent {yes}
                exp_send -h "yes\r"
	        exp_continue
            }

            -re "Last(.*)ogin:(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                sleep 2
                exp_send -h "\r"
                exp_continue
            }

            -re "(.*)ogin:(.*)" {
		set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "$user"
                exp_send -h "$user\r"
	        exp_continue
            }

            -re "(.*)assword:(.*)" {
		set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "$passwrd"
                exp_send -h "$passwrd\r"
	        exp_continue
            }

            -re (.*)$root_prompt {
		set ::prompt($this) $root_prompt
		set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched ($::prompt($this))"
                flush_exp_buffer $spawn_id
                return [list "true" "$msg"]
            }

            -re (.*)$admin_prompt {
		set ::prompt($this) $admin_prompt
		set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched ($::prompt($this))"
                flush_exp_buffer $spawn_id
                return [list "true" "$msg"]
            }

            -re {(.*)]\$} {
                set ::prompt($this) $expect_out(buffer)
                set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched ($::prompt($this))"
                flush_exp_buffer $spawn_id
                return [list "true" "$msg"]
            }

            -re {(.*)\#\?} {
                set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched (#?)"
	        exp_send -i $spawn_id \003
                flush_exp_buffer $spawn_id
	        exp_continue
            }

            -re (.*)$::prompt($this) {
                set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched ($::prompt($this))"
                flush_exp_buffer $spawn_id
                return [list "true" "$msg"]
            }

            -re (.*)Command> {
		set ::prompt($this) $rom_prompt
                set msg $expect_out(buffer)
                write_received "$msg"
                write_info "Matched (Command>)"
                flush_exp_buffer $spawn_id
                return [list "true" "$msg"]
            }

            -re "ftp>" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "exit"
                exp_send -h "exit\r"
                exp_continue
            }

            -timeout 5 timeout {
                write_warning "Timedout waiting for responce - ($attempt/$gretry)"
                flush_exp_buffer $spawn_id
	        exp_send -h "\r"
	        incr attempt
	        incr lretry -1
            }

            eof {
                set msg $expect_out(buffer)
                write_received "$msg"
                write_error "Connection to $this failed"
                return [list "false" "$msg"]
            }
        }
    }
    flush_exp_buffer $spawn_id
    return [list "false" ""]
}

itcl::body pc::pc_config_int { int ip mask bcast } {

    set sid $::sid($this)

    # bring the interface down before configuring
    set cmd "/sbin/ifconfig $int down"
    set exp "$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "$::prompt($this)" 2 5]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # configure the interface
    set cmd "/sbin/ifconfig $int $ip netmask $mask broadcast $bcast"
    set exp "$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "$::prompt($this)" 2 5]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # bring the interface up
    set cmd "/sbin/ifconfig $int up"
    set exp "$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "$::prompt($this)" 2 5]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # start capturing packets on the interface
    set cmd "/usr/sbin/tshark -i $int -w /tmp/$int.pcap -q &"
    set exp "$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "$::prompt($this)" 2 5]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    return [list "true" ""]
}

itcl::body pc::pc_add_ip_alias { int ip_range mask bcast } {

    set sid $::sid($this)

    set ip_range [split $ip_range "-"]
    set start_ip [lindex $ip_range 0]    
    set end_ip [lindex $ip_range 1]    

    set ret [regexp {(\d+\.\d+\.\d+\.)(\d+)} $start_ip match root from]
    set ret [regexp {\d+\.\d+\.\d+\.(\d+)} $end_ip match to]

    set sub 0

    for {set x $from} {$x <= $to} {incr x} {

        # set up the aliases
        set cmd "/sbin/ifconfig $int:$sub $root$x netmask $mask broadcast $bcast"
        set exp "$::prompt($this)"

        set ret [send_expect_pair $sid $cmd $exp "$::prompt($this)" 2 5]
        if { [problem_with $ret] } {
            write_error [data_from $ret]
            return [list false [data_from $ret]]
        }
        incr sub
    }
    return [list "true" ""]
}

itcl::body pc::pc_ping { dst count } {

    set sid $::sid($this)
    set allow_loss 0

    # calculate how long to wait for ping responce.
    set wait [expr 2 * $count]

    # the command to exec.
    set cmd "/bin/ping -c $count $dst"
    set exp "$dst ping statistics.*$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "" 2 $wait "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # get the ping stats.
    if { ![regexp {(\d+) packets transmitted, (\d+) received, (\d+%) packet loss} [data_from $ret] match sent rec loss] } {
        write_error "Could not determin $dst ping statistics" 
        return [list false [data_from $ret]]
    }

    # check the packet loss
    if { [regsub "%" $loss ""] > 0 } {
        write_error "Packet loss \($loss\) is greater then $allow_loss%" 
        return [list false [data_from $ret]]
    }
    
    return [list "true" "$sent $rec $loss"]
}

itcl::body pc::pc_traceroute { dst hops } {

    set sid $::sid($this)

    # the command to exec.
    set cmd "/bin/traceroute $dst"
    set exp "\\d+\\s+$dst\\s+\\($dst\\)"

    set ret [send_expect_pair $sid $cmd $exp "" 2 5 "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # get the traceroute stats.
    if { ![regexp "(\\d+)\\s+$dst\\s+\\($dst\\)\\s+\\S+\\s+ms" [data_from $ret] match hop] } {
        write_error "Could not determin $dst traceroute statistics"
        return [list false [data_from $ret]]
    }

    if { $hops != "" } {
        # check the hops
        if { $hop != $hops } {
            write_error "Recieved hops \($hop\) not same as expected hops \($hops\)"
            return [list false [data_from $ret]]
        }

        write_info "Recieved hops \($hop\) same as expected hops \($hops\)"
    }

    return [list "true" "[data_from $ret]"]
}

itcl::body pc::pc_tcpreplay_play { int mbps pcap } {

    set sid $::sid($this)

    # ensure that the interface is up.
    set cmd "ifconfig $int up"
    set exp ""

    set ret [send_expect_pair $sid $cmd $exp "" 2 10 "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # the command to exec.
    switch $mbps {
        "0" {
            set cmd "tcpreplay -i $int -t $pcap"
        }

        default {
            set cmd "tcpreplay -i $int -M $mbps $pcap"
        }
    }

    set exp "Statistics for network device.*$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "" 2 10 "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    # get the tcpreplay stats.
    if { ![regexp {Attempted packets:\s+(\d+).*Successful packets:\s+(\d+).*Failed packets:\s+(\d+).*Retried packets:\s+(\d+)} [data_from $ret] match attempt successful fail retry] } {
        write_error "Could not determin tcpreplay stats for $pcap"
        return [list false [data_from $ret]]
    }

    set err 0

    if { $fail != "0"} {
        write_error "Failed packets: $failed (expected 0)"
        incr err
    }

    if { $retry != 0 } {
        write_error "Retried packets: $retry (expected 0)"
        incr err
    }

    if { $err > 0 } { 
        write_error "tcpreplay incorrect Failed/Retried packet count."
        return [list false [data_from $ret]]
    }

    write_info "Attempted packets: $attempt, Successful packets: $successful"

    return [list "true" "$attempt $successful"]
}

itcl::body pc::pc_curl_fetch_header { int url } {

    set sid $::sid($this)

    # ensure that the interface is up.
    set cmd "ifconfig $int up"
    set exp ""

    set ret [send_expect_pair $sid $cmd $exp "" 2 10 "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    set cmd "curl -IL --interface $int $url"
    set exp "$cmd.*HTTP.*Connection.*$::prompt($this)"

    set ret [send_expect_pair $sid $cmd $exp "" 2 10 "" noresend]
    if { [problem_with $ret] } {
        write_error [data_from $ret]
        return [list false [data_from $ret]]
    }

    #trim the output.
    set data [regexp "$cmd.*(HTTP.*Connection.*)$::prompt($this)" [data_from $ret] match out]

    return [list "true" "$out"]
}

itcl::body pc::pc_curl_parse_header { data testarr cfield cvalue } {

    upvar $testarr crarr
    
    foreach line [split $data "\n"] {
        if [regexp {(\S+):?(.*)} $line match key val] {
            set crarr($key) [string trim $val]
        }
    }

    foreach name [array names crarr] {
        puts "$name = $crarr($name)"
    }

    if { [info exists crarr($cfield)] } {
        if { $crarr($cfield) == $cvalue } {
            return [list "true" ""]
        }
    }

    return [list "false" ""]
}

itcl::body pc::pc_connect_to { method dst user passwrd } {

    set spawn_id $::sid($this)

    set lretry $gretry
    set attempt 1

    switch $method {
        "ssh" {
            set cmd "$method $user@$dst"
        }
        "telnet" {
            set cmd "$method $dst"
        }
        "ftp" {
            set cmd "$method $dst"
        }
        default {
            set method "telnet"
            set cmd "$method $dst"
        }
    }

    flush_exp_buffer $spawn_id
    exp_send "$cmd\r"
    write_sent "$cmd"

    while {$lretry > 0} {
        expect {
            -re "(.*)Escape character is(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                exp_send -h "\r"
                exp_send -h "\r"
                exp_continue
            }

            -nocase "(.*)connection refused(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                write_error "Connection refused"
                flush_exp_buffer $spawn_id
                exp_send -h "exit\r"
                return [list "false" "$msg"]
            }

            -re "(.*)you sure you want to continue connecting(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent {yes}
                exp_send -h "yes\r"
                exp_continue
            }

            -re "(.*)ogin successful(.*)ftp>" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id

                write_sent "exit"
                exp_send -h "exit\r"
                expect {
                    -re "Goodbye" {
                        flush_exp_buffer $spawn_id
                        return [list "true" "$msg"]
                    }

                    -timeout 5 timeout {
                        write_warning "Timedout waiting for logout"
                        flush_exp_buffer $spawn_id
                        exp_send -h "\r"
                        exp_continue
                    }
                }
            }

            -re "Last(.*)ogin:(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id

                write_sent "exit" 
                exp_send -h "exit\r"
                expect {
                    -re "logout" {
                        flush_exp_buffer $spawn_id
                        return [list "true" "$msg"]
                    }

                    -re "Connection to(.*)closed" {
                        flush_exp_buffer $spawn_id
                        return [list "true" "$msg"]
                    }

                    -timeout 5 timeout {
                        write_warning "Timedout waiting for logout"
                        flush_exp_buffer $spawn_id
                        exp_send -h "\r"
                        exp_continue
                    }
                }
            }

            -re "(.*)Name(.*):" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "$user"
                exp_send -h "$user\r"
                exp_continue
            }

            -re "(.*)ogin:(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "$user"
                exp_send -h "$user\r"
                exp_continue
            }

            -re "(.*)assword:(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "$passwrd"
                exp_send -h "$passwrd\r"
                exp_continue
            }

            -re "ftp>" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id
                write_sent "exit"
                exp_send -h "exit\r"
                exp_continue
            }

            -re "(.*)Host key verification failed(.*)" {
                set msg $expect_out(buffer)
                write_received "$msg"
                flush_exp_buffer $spawn_id

                write_sent "rm -rf /root/.ssh/known_hosts"
                exp_send -h "rm -rf /root/.ssh/known_hosts\r"
                
                expect {
                    -re "$::prompt($this)" {
                        flush_exp_buffer $spawn_id
                        write_sent "$cmd"
                        exp_send -h "$cmd\r"
                    }

                    -timeout 5 timeout {
                        write_warning "Timedout waiting for $::prompt($this)"
                        flush_exp_buffer $spawn_id
                        exp_send -h "\r"
                    }
                 }

                 exp_continue
            }

            -timeout 30 timeout {
                write_warning "Timedout waiting for responce - ($attempt/$gretry)"
                flush_exp_buffer $spawn_id
                exp_send -h "\r"
                incr attempt
                incr lretry -1
            }

            eof {
                set msg $expect_out(buffer)
                write_received "$msg"
                write_error "Connection to $this failed"
                exp_send -h "exit\r"
                return [list "false" "$msg"]
            }
        }
    }

    flush_exp_buffer $spawn_id
    #exp_send -h "exit\r"
    return [list "false" ""]
}

itcl::body pc::pc_scp_file { src dst passwrd } {

    set lretry $gretry
    set attempt 1

    set spawn_id $::sid($this)

    while {$lretry > 0} {

        flush_exp_buffer $spawn_id
        write_sent "scp $src $dst"
        exp_send -h "scp $src $dst\r"

        # need a sleep here for some reason.
        sleep 1

        set ret [$this pc_general_expect root $passwrd]
        if { [problem_with $ret] } {
            return [list false [data_from $ret]]
        }

        if { [regexp {.*100%.*} [data_from $ret] match ] } {
            write_step "SCP of $src to $dst successfull"
            return [list true [data_from $ret]]
        }

        incr attempt
        incr lretry -1
    }
    return [list "false" [data_from $ret]]
}

# the following line must be left at the bottom of the script.
package provide pc 1.0
